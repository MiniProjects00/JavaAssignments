package com.maven.demo.model;

import java.io.Serializable;
import java.time.LocalDate;
import java.util.List;

import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import javax.validation.constraints.Email;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Past;
import javax.validation.constraints.Pattern;

import org.springframework.format.annotation.DateTimeFormat;

import com.fasterxml.jackson.annotation.JsonBackReference;

import javax.persistence.CascadeType;
import javax.persistence.ElementCollection;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;

@Entity																
public class Employee implements Comparable<Employee>, Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;	
	
	@Id		
	@GeneratedValue(strategy = GenerationType.AUTO)
	private int empId;
	
	@Pattern(regexp = "^\\w{3,}$", message = "Name should at least min 3 characters long")		
	private String name;																	
	
	@NotNull(message = "Employee date of birth requried")
	@Past(message = "Only date value is in the past allowed")
	@DateTimeFormat(pattern = "yyyy-MM-dd")
	private LocalDate dateOfBirth;

	@Pattern(regexp = "^[9|8]\\d{7}$", message = "Valid mobile number required")		
	private String mobileNumber;												
	
	@Email(message = "Valid email required")
	private String email;
	
	@Embedded
	@NotNull(message = "Valid address required")
	private Address address;											
	
	@Pattern(regexp = "^\\d{10}$", message = "Valid bank account number required")				
	private String bankAcc;
	
	@NotEmpty(message = "Employee designation required")
	private String designation;
	
	@Min(message = "Minimum salary is $2500", value = 2500)
	private int salary;

	@ElementCollection			
	private List<Dependent> dependentList;
	
	@ManyToOne
	@JoinColumn(name="project_Id")										
	@JsonBackReference							
	private Project projectAssigned;
	
	@OneToOne(cascade = CascadeType.PERSIST)
	private Laptop laptop;

	
	public Employee()	{}

	
	//	Basic details: without id (auto generated by DB) and projectAssigned
	public Employee(@Pattern(regexp = "^\\w{3,}$", message = "Name should at least min 3 characters long") String name,
			@NotNull(message = "Employee date of birth requried") @Past(message = "Only date value is in the past allowed") LocalDate dateOfBirth,
			@Pattern(regexp = "^[9|8]\\d{7}$", message = "Valid mobile number required") String mobileNumber,
			@Email(message = "Valid email required") String email,
			@NotEmpty(message = "Employee address required") Address address,
			@Pattern(regexp = "^\\d{10}$", message = "Valid bank account number required") String bankAcc,
			@NotEmpty(message = "Employee designation required") String designation,
			@Min(message = "Minimum salary is $2500", value = 2500) int salary, 
			List<Dependent> dependentList) {
		super();
		this.name = name;
		this.dateOfBirth = dateOfBirth;
		this.mobileNumber = mobileNumber;
		this.email = email;
		this.address = address;
		this.bankAcc = bankAcc;
		this.designation = designation;
		this.salary = salary;
		this.dependentList = dependentList;
	}

	
	//	Full constructor
	public Employee(int empId,
			@Pattern(regexp = "^\\w{3,}$", message = "Name should at least min 3 characters long") String name,
			@NotNull(message = "Employee date of birth requried") @Past(message = "Only date value is in the past allowed") LocalDate dateOfBirth,
			@Pattern(regexp = "^[9|8]\\d{7}$", message = "Valid mobile number required") String mobileNumber,
			@Email(message = "Valid email required") String email,
			@NotNull(message = "Valid address required") Address address,
			@Pattern(regexp = "^\\d{10}$", message = "Valid bank account number required") String bankAcc,
			@NotEmpty(message = "Employee designation required") String designation,
			@Min(message = "Minimum salary is $2500", value = 2500) int salary, List<Dependent> dependentList,
			Project projectAssigned, Laptop laptop) {
		super();
		this.empId = empId;
		this.name = name;
		this.dateOfBirth = dateOfBirth;
		this.mobileNumber = mobileNumber;
		this.email = email;
		this.address = address;
		this.bankAcc = bankAcc;
		this.designation = designation;
		this.salary = salary;
		this.dependentList = dependentList;
		this.projectAssigned = projectAssigned;
		this.laptop = laptop;
	}

	
	public int getEmpId() {
		return empId;
	}


	public void setEmpId(int empId) {
		this.empId = empId;
	}


	public String getName() {
		return name;
	}


	public void setName(String name) {
		this.name = name;
	}


	public LocalDate getDateOfBirth() {
		return dateOfBirth;
	}


	public void setDateOfBirth(LocalDate dateOfBirth) {
		this.dateOfBirth = dateOfBirth;
	}


	public String getMobileNumber() {
		return mobileNumber;
	}


	public void setMobileNumber(String mobileNumber) {
		this.mobileNumber = mobileNumber;
	}


	public String getEmail() {
		return email;
	}


	public void setEmail(String email) {
		this.email = email;
	}

	
	public Address getAddress() {
		return address;
	}


	public void setAddress(Address address) {
		this.address = address;
	}
	public String getBankAcc() {
		return bankAcc;
	}


	public void setBankAcc(String bankAcc) {
		this.bankAcc = bankAcc;
	}


	public String getDesignation() {
		return designation;
	}


	public void setDesignation(String designation) {
		this.designation = designation;
	}


	public int getSalary() {
		return salary;
	}


	public void setSalary(int salary) {
		this.salary = salary;
	}


	public List<Dependent> getDependentList() {
		return dependentList;
	}


	public void setDependentList(List<Dependent> dependentList) {
		this.dependentList = dependentList;
	}


	public Laptop getLaptop() {
		return laptop;
	}


	public void setLaptop(Laptop laptop) {
		this.laptop = laptop;
	}

	
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", name=" + name + ", dateOfBirth=" + dateOfBirth + ", mobileNumber="
				+ mobileNumber + ", email=" + email + ", address=" + address + ", bankAcc=" + bankAcc + ", designation="
				+ designation + ", salary=" + salary + ", dependentSet=" + dependentList + ", projectAssigned="
				+ projectAssigned + ", laptop=" + laptop + "]";
	}

	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((address == null) ? 0 : address.hashCode());
		result = prime * result + ((bankAcc == null) ? 0 : bankAcc.hashCode());
		result = prime * result + ((dateOfBirth == null) ? 0 : dateOfBirth.hashCode());
		result = prime * result + ((dependentList == null) ? 0 : dependentList.hashCode());
		result = prime * result + ((designation == null) ? 0 : designation.hashCode());
		result = prime * result + ((email == null) ? 0 : email.hashCode());
		result = prime * result + empId;
		result = prime * result + ((laptop == null) ? 0 : laptop.hashCode());
		result = prime * result + ((mobileNumber == null) ? 0 : mobileNumber.hashCode());
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		result = prime * result + ((projectAssigned == null) ? 0 : projectAssigned.hashCode());
		result = prime * result + salary;
		return result;
	}

	
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Employee other = (Employee) obj;
		if (address == null) {
			if (other.address != null)
				return false;
		} else if (!address.equals(other.address))
			return false;
		if (bankAcc == null) {
			if (other.bankAcc != null)
				return false;
		} else if (!bankAcc.equals(other.bankAcc))
			return false;
		if (dateOfBirth == null) {
			if (other.dateOfBirth != null)
				return false;
		} else if (!dateOfBirth.equals(other.dateOfBirth))
			return false;
		if (dependentList == null) {
			if (other.dependentList != null)
				return false;
		} else if (!dependentList.equals(other.dependentList))
			return false;
		if (designation == null) {
			if (other.designation != null)
				return false;
		} else if (!designation.equals(other.designation))
			return false;
		if (email == null) {
			if (other.email != null)
				return false;
		} else if (!email.equals(other.email))
			return false;
		if (empId != other.empId)
			return false;
		if (laptop == null) {
			if (other.laptop != null)
				return false;
		} else if (!laptop.equals(other.laptop))
			return false;
		if (mobileNumber == null) {
			if (other.mobileNumber != null)
				return false;
		} else if (!mobileNumber.equals(other.mobileNumber))
			return false;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		if (projectAssigned == null) {
			if (other.projectAssigned != null)
				return false;
		} else if (!projectAssigned.equals(other.projectAssigned))
			return false;
		if (salary != other.salary)
			return false;
		return true;
	}


	@Override
	public int compareTo(Employee e) {
		
		return this.getEmpId() - e.getEmpId();
	}

}